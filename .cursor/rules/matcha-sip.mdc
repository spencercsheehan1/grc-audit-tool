---
description: 
globs: 
alwaysApply: false
---
# GRC Audit Tool (matcha-sip) Documentation

## Overview
The GRC Audit Tool, specifically `matcha-sip.py`, is a GitHub Pull Request auditing utility that generates CSV reports of merged pull requests within a specified timeframe. The tool is designed to help teams track and review their pull request history across multiple repositories in a format that's easy to analyze and share with auditors.

## Key Features
- Fetches merged pull requests from specified GitHub repositories
- Interactive prompts for all configuration (owner, repos, date range, output directory)
- Handles GitHub API rate limiting with retry mechanism
- Generates CSV files for easy import into spreadsheet applications
- Includes author information for each pull request
- Includes error handling and failed request logging
- Clear instructions for entering multiple repositories

## Prerequisites
Before running the tool, you need:
1. GitHub Personal Access Token with appropriate permissions
2. Python 3.x with virtual environment support

## Environment Variables
Only one environment variable needs to be set in the `.env` file:

```bash
GITHUB_TOKEN="your-github-token"        # Your GitHub API authentication token
```

All other configuration is provided interactively when running the script.

## Interactive Inputs
When you run the script, it will prompt you for:

1. **Repository Owner**
   - The GitHub organization or username that owns the repositories
   - Example: `microsoft`, `google`, or your GitHub username

2. **Repository Names**
   - You can enter repositories in two ways:
     - **Option 1**: All at once, comma-separated: `repo1,repo2,repo3`
     - **Option 2**: One at a time (press Enter after each, then Enter on empty line when done)

3. **Start Date**
   - Format: `YYYY-MM-DD`
   - Example: `2024-01-01`

4. **End Date**
   - Format: `YYYY-MM-DD`
   - Example: `2024-12-31`

5. **Output Directory**
   - Where to save the audit reports
   - Examples: `~/pr-reports`, `./output`, `/Users/username/audit-reports`
   - Directory will be created if it doesn't exist

## Output Format
For each repository, the tool generates a CSV file (`{repo-name}.csv`) containing:

### CSV Headers:
- PR Number
- Title
- Author
- Merged At
- URL

### File Contents:
```csv
PR Number,Title,Author,Merged At,URL
# Repository: owner/repo,,,,
# Date Range: 2024-01-01 to 2024-12-31,,,,
# Total PRs: 42,,,,
,,,,
#123,Fix critical bug in authentication,jsmith,2024-03-15T10:30:00Z,https://github.com/owner/repo/pull/123
#124,Add new feature for user profiles,mjones,2024-03-16T14:45:00Z,https://github.com/owner/repo/pull/124
...
,,,,
# Failed Requests:,,,,
# Page 15,Rate limit exceeded,,,,
```

## Technical Details

### API Interaction
- Uses GitHub REST API v3
- Implements pagination (100 PRs per page)
- Includes rate limit checking before requests
- Features a 3-attempt retry mechanism for rate limit issues

### Data Collection Process
1. Prompts user for all necessary configuration
2. Iterates through each repository provided
3. Fetches closed pull requests page by page
4. Filters for:
   - Merged PRs only
   - PRs within specified date range
5. Collects PR metadata:
   - PR number
   - Title
   - Author username
   - Merge timestamp
   - HTML URL

### Error Handling
- Validates all user inputs
- Checks API rate limits proactively
- Retries failed requests up to 3 times
- Logs failed requests in CSV files
- Provides helpful error messages for common issues (e.g., SSO configuration)

## Usage

1. Set up environment:
```bash
# Create and activate virtual environment
python -m venv .venv
source .venv/bin/activate  # On Unix/macOS
# or
.venv\Scripts\activate  # On Windows

# Install dependencies
pip install -r requirements.txt
```

2. Create `.env` file with your GitHub token:
```bash
echo "GITHUB_TOKEN=your_token_here" > .env
```

3. Run the script:
```bash
python matcha-sip.py
```

4. Follow the interactive prompts

5. Check the output directory for generated CSV files

## Best Practices
- Ensure your GitHub token has appropriate permissions
- Enable SSO if required for your organization
- Monitor rate limits when auditing many repositories
- Keep the token secure and never commit it to version control
- Use descriptive output directory names for different audit periods
- Import CSV files into Excel or Google Sheets for further analysis

## Limitations
- Outputs in CSV format only
- Limited to merged pull requests only
- Processes repositories sequentially (not in parallel)

## Error Messages
Common error messages and their solutions:

1. "Rate limit exceeded":
   - Check token permissions
   - Verify SSO configuration at https://github.com/settings/tokens
   - Wait for rate limit reset

2. "API connection failed":
   - Verify token is valid
   - Check network connectivity
   - Ensure repository names are correct

## Future Improvements
Potential enhancements could include:
- Additional output formats (JSON, Excel)
- Concurrent repository processing
- Support for GitHub Enterprise
- Filtering by PR labels or authors
- Progress bar for long-running audits
- Summary statistics across all repositories

# Branch Naming Guide

A concise convention for naming Git branches in this Python project. Following these rules keeps our history tidy, lets automation do its job, and helps new contributors ramp up quickly.

## 1 Primary Format

| Rule | Description | Example | Notes |
|------|-------------|---------|--------|
| kebab-case | Lower-case words separated by hyphens | `stone-mill-upgrade` | |
| Prefix | Namespace that explains why the branch exists | `feature/`, `bugfix/`, `hotfix/`, `chore/`, `docs/` | |
| No spaces | Spaces break Git commands & URLs | ✅ `feature/first-harvest` ❌ `feature/first harvest` | |
| Avoid punctuation | Only hyphens (-) and forward-slash prefix are allowed | `bugfix/umami-boost-overflow` | |

**TL;DR** — `<prefix>/<kebab-case-summary>`

## 2 Matcha-Themed A–Z Stubs

Pick the next unused stub (or choose one that best fits your work). Combine it with a prefix to form the final branch name.

| Letter | Stub (kebab-case) | Quick Note |
|--------|------------------|------------|
| A | aerated-leaves | Air-dried leaves; a light starting point |
| B | bitter-balance | Tweaking bitterness vs. sweetness |
| C | ceremonial-grade | Highest matcha quality |
| D | deep-steam | Longer steaming step | 